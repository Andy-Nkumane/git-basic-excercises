    1  pwd
    2  ls
    3  cd Documents/
    4  cd 'Linux Subsystem Files'/
    5  ls
    6  lsb_release
    7  sudo apt-get install lsb-core
    8  lsb_release
    9  man cowsay
   10  man fortune
   11  man figlet
   12  sudo apt install cowsay
   13  man cowsay
   14  sudo apt install fortune
   15  sudo apt install figlet, lolcat, rig
   16  sudo apt install figlet lolcat rig
   17  cowsay -l
   18  cowsay|fortune
   19  cowsay
   20  sudo apt install git
   21  man wget
   22  wget http://umuzi.gitlab.io/linux-slides/files/books.tar.gz
   23  wget http://umuzi.gitlab.io/linux-slides/files/mysteryfiles.tar.gz
   24  man file
   25  ls
   26  file mysteryfiles.tar.gz 
   27  file books.tar.gz 
   28  man tar
   29  tar x mysteryfiles.tar.gz
   30  tar -xf mysteryfiles.tar.gz
   31  ls
   32  man gunzip
   33  gunzip -l books.tar.gz 
   34  man gunzip
   35  gunzip -d books.tar.gz 
   36  funzip books.tar 
   37  funzip books.tar.gz
   38  man gunzip
   39  tar xvzf books.tar.gz
   40  ls
   41  tar xvzf books.tar
   42  tar xvzf mysteryfiles.tar.gz
   43  ls
   44  gunzip mysteryfiles.tar.gz 
   45  gunzip -t mysteryfiles.tar.gz 
   46  tar xz mysteryfiles.tar.gz
   47  tar xzf mysteryfiles.tar.gz
   48  tar xvzf mysteryfiles.tar.gz
   49  ls
   50  grep -r 'A Tale of Two Cities' books/
   51  grep -r 'Peter Pan' books/
   52  grep -r 'Little Women' books/
   53  cd books/
   54  ls
   55  wc 25717-0.txt 
   56  ls -l 25717-0.txt 
   57  wc -l 25717-0.txt 
   58  wc -c 25717-0.txt 
   59  man sshj
   60  man ssh
   61  ssh umuzi1.bjart.li
   62  man ssh
   63  ssh umuzi1.bjart.li
   64  ssh umuzi@umuzi1.bjart.li
   65  ssh umuzi1.bjart.li
   66  ssh umuzi@umuzi1.bjart.li
   67  ssh umuzi@umuzi5.bjart.li
   68  man printf
   69  printf "Hello"
   70  printf "Hello\n"
   71  printf "Hello %s, the time is now ...\n" $USER
   72  printf "Hello %s, the time is now %s\n" $USER date
   73  printf "Hello %s, the time is now %s\n" $USER, date
   74  printf "Hello %s, the time is now %s\n" $USER date+"%d-%m-%y"
   75  printf "Hello %s, the time is now %d-%m-%y\n" $USER date
   76  date
   77  printf "Hello %s, the time is now \n" $USER date+"%d-%m-%y"
   78  printf "Hello %s, the time is now \n" $USER, date+"%d-%m-%y"
   79  printf "Hello %s, the time is now $now\n" $USER
   80  printf "Hello %s, the time is now %s\n" $USER $now
   81  printf "Hello %s, the time is now $now\n" $USER now=$(date)
   82  printf "Hello %s, the time is now %s\n" $USER, $now
   83  printf "Hello %s, the time is now %s\n" [$USER, $now]
   84  printf "Hello %s, the time is now %s\n" [$USER $now]
   85  printf "Hello %s, the time is now %s\n" "$USER" "$now"
   86  printf "Hello %s, the time is now %s\n" "$USER", "$now"
   87  printf "Hello %s, the time is now %s\n" "$USER" + "$now"
   88  printf "Hello %s, the time is now cs\n" "$USER" + "$now"
   89  printf "Hello %s, the time is now %c\n" "$USER" + "$now"
   90  printf "Hello %s, the time is now %c\n" "$USER" "$now"
   91  printf "Hello %s, the time is now %c\n"  "$now"
   92  printf "Hello %s, the time is now %c\n"  $(date)
   93  printf "Hello %s, the time is now %c\n" "$USER" $(date)
   94  printf "Hello %s, the time is now %c\n" "$USER" "$(date)"
   95  printf "Hello %s, the time is now %R\n" "$USER" "$(date)"
   96  printf "Hello %s, the time is now %F\n" "$USER" "$(date)"
   97  printf "Hello %s, the time is now %A\n" "$USER" "$(date)"
   98  printf "Hello %s, the time is now %s\n" "$USER" "$(date)"
   99  printf "Hello %s, the time is now %s\n" "$USER" "$(date+'FORMAT')"
  100  printf "Hello %s, the time is now %s\n" "$USER" "$(date+'%d-%m-%y")"
  101  printf "Hello %s, the time is now %s\n" "$USER" "$(date+'%d-%m-%Y")"
  102  printf "Hello %s, the time is now %s\n" "$USER" "$(date +'%d-%m-%Y")"
  103  printf "Hello %s, the time is now %s\n" "$USER" "$(date+"%d-%m-%Y")"
  104  printf "Hello %s, the time is now %s\n" "$USER" "$(date +'%r')"
  105  printf "Hello %s, the time is now %s\n" "$USER" "$(date +'%R')"
  106  read -p "Enter number: " given_num
  107  read -p "Enter step size: " step_size
  108  $given_num 
  109  echo "$given_num"
  110  echo "$step_size "
  111  cnt = 1
  112  count=1
  113  echo '$count'
  114  echo "$count"
  115  count= 2
  116  echo "$count"
  117  if [count<given_num]; then echo "$count"; count=count+step_size; 
  118  if ["$count"<"$given_num"]; then echo "$count"; count=count+step_size; 
  119  if (($count < $given_num)); then echo "$count"; count=count+step_size; 
  120  if (($count < $given_num)); then echo "$count"
  121  if (($count < $given_num)); then echo "$count"; 
  122  if (($count < $given_num)); then echo "$count"; count=count+step_size; fi
  123  if (($count < $given_num)); then echo "$count"; count=count + step_size; fi
  124  if (($count < $given_num)); then echo "$count"; count = count + step_size; fi
  125  echo "$count"
  126  count=1
  127  if (($count < $given_num)); then echo "$count"; count = $count + $step_size; fi
  128  echo "$count"
  129  if (($count < $given_num)); then echo "$count"; $count = $count + $step_size; fi
  130  echo "$count"
  131  while (($count < $given_num)); do echo "$count"; ((count = count + step_size)); done
  132  exit
  133  lsb_release
  134  ls
  135  pwd
  136  ls /
  137  cd home/
  138  cd /home
  139  ls
  140  cd vector
  141  ls
  142  pwd
  143  cd /
  144  cd /mnt
  145  ls
  146  cd c
  147  ls
  148  cd Users/
  149  ls
  150  cd Aspire/
  151  ls
  152  cd Documents/
  153  ls
  154  cd 'Linux Subsystem Files'
  155  ls
  156  pwd
  157  lsb_release
  158  lsb_release -a
  159  man pdb
  160  man figlet
  161  man fortune
  162  man rig
  163  man cowsay
  164  ls
  165  cd home
  166  ls
  167  cd christian/
  168  ls
  169  cd files/
  170  ls
  171  du -hs * | sort -rh
  172  cd ../../..
  173  ls
  174  tar -xvf books.tar 
  175  ls
  176  cd books/
  177  ls
  178  du -hs * | sort -rh
  179  grep A Tale of Two Cities
  180  grep -r A Tale of Two Cities
  181  cd ../
  182  grep -r A Tale of Two Cities /books/
  183  grep -r 'A Tale of Two Cities' /books/
  184  grep -r 'A Tale of Two Cities' /books
  185  grep -r 'A Tale of Two Cities' books/
  186  grep 'A Tale of Two Cities' books/
  187  grep -r 'A Tale of Two Cities' books/
  188  ssh umuzi@umuzi1.bjart.li
  189  xit
  190  exit
  191  ls
  192  ls /
  193  cd /mnt
  194  ls
  195  cd c/
  196  cd Documents
  197  ls
  198  cd Users/
  199  ls
  200  cd Aspire/
  201  cd Documents/
  202  cd 'Linux Subsystem Files'/
  203  ls
  204  sudo ssh umuzi@umuzi1.bjart.li
  205  clear
  206  ls
  207  clear
  208  git
  209  vim
  210  exit
  211  cd Documents/'Linux Subsystem Files'/
  212  ls -l
  213  chmod a-x books.tar 
  214  ls -l
  215  chmod g-x books.tar 
  216  ls -l
  217  chmod 763 books.tar 
  218  ls -l
  219  chmod 763 books
  220  ls -l
  221  sudo chmod 763 books.tar 
  222  ls -l
  223  chmod -R 763 books
  224  ls -l
  225  chmod -R 763 books.tar
  226  ls -l
  227  touch myf
  228  ls
  229  ls -l
  230  chmod 763 myf
  231  ls -l
  232  sudo chmod 763 myf
  233  ls -l
  234  sudo chmod 763 myf/
  235  sudo chmod 763 books/
  236  ls -l
  237  man chown
  238  chown root root myf
  239  ls /
  240  ls /root
  241  sudo ls /root
  242  sudo chown root root myf
  243  sudo chown /root root myf
  244  sudo chown vector cev  myf
  245  exit
  246  git
  247  git -- version
  248  git --version
  249  cd Documents/
  250  cd "Linux Subsystem Files"/
  251  git
  252  pytest
  253  man pytest
  254  sudo apt install pytest
  255  pytest --version
  256  sudo apt install python-pytest
  257  pytest --versoin
  258  pytest --version
  259  git --version
  260  sudo apt update
  261  sudo apt upgrade
  262  git --version
  263  sudo apt update
  264  exit
  265  ls
  266  cd Documents/
  267  cd 'Linux Subsytem Files'/
  268  ls
  269  cd 'Linux Subsystem Files'/
  270  clear
  271  git init
  272  ls
  273  cd git_file/
  274  ls
  275  mkdir git-basic-excercises
  276  ls
  277  cd..
  278  cd ..
  279  rm -i git_file/
  280  rm -f git_file/
  281  mkdir git-basic-excercises
  282  cd git-basic-excercises/
  283  git init
  284  ls
  285  ls -a
  286  git status
  287  git log
  288  touch README.md
  289  ls
  290  ls -a
  291  git status
  292  git log
  293  git add
  294  git add .
  295  git status
  296  cd checkout -- README.md
  297  git checkout -- README.md
  298  git status
  299  clear
  300  ls
  301  git status
  302  git reset HEAD -- README.md
  303  git status
  304  git add .
  305  git commit -m "initial commit"
  306  git config -- user.email "nkumaneady@gmail.com"
  307  git config -- user.name "Andy"
  308  git commit -m "initial commit"
  309  clear
  310  git log
  311  nano README.md 
  312  cat README.md 
  313  git stats
  314  git status
  315  git add .
  316  git commit -m 'second commit'
  317  git log
  318  nano README.md 
  319  cat README.md 
  320  nano README.md 
  321  cat README.md 
  322  git add .
  323  git commit -m 'third commit'
  324  git log
  325  git checkout 36fdb51202c262dc92b5f84267d2c5f10b70dac0
  326  cat README.md 
  327  git checkout master
  328  cat README.md 
  329  git branch
  330  git checkout -b milkshake-flavours
  331  git branch
  332  nano milkshakes.md
  333  git status
  334  git add .
  335  git status
  336  git commit -m 'added initial flavours'
  337  git log
  338  git checkout master
  339  git branch
  340  git branch history
  341  git log
  342  git branch
  343  git log
  344  git log milkshake-flavours 
  345  history > history.txt
  346  git status
  347  git add .
  348  git status
  349  git commit -m 'added history'
  350  git checkout milkshake-flavours 
  351  git log
  352  nano README.md
  353  cat README.md 
  354  git checkout history
  355  cat README.md 
  356  git branch 
  357  rm README.md 
  358  echo 'booya' > README.md
  359  git add .
  360  git commit -m 'rewrote readme'
  361  git checkout master 
  362  ls
  363  git log
  364  git reset HEAD -- history.txt
  365  git log
  366  ls
  367  git checkout history 
  368  ls
  369  git checkout master 
  370  rm history.txt 
  371  ls
  372  git checkout history 
  373  history > history.txt
  374  ls
  375  git add history.txt 
  376  git commit -m 'added history'
  377  ls
  378  git log
  379  git checkout master 
  380  git reset --hard HEAD
  381  git log
  382  git revert 579da1936e5e05c5e887dac3f769bb5258794450
  383  git
  384  git log
  385  git branch
  386  git rm -r git-basic-excercises
  387  git rm -r history
  388  ls -a
  389  git rm -r README.md 
  390  git rm -r .git
  391  cd ..
  392  git rm -r git-basic-excercises
  393  cd git-basic-excercises/
  394  ls -a
  395  git log
  396  cd ..
  397  rm git-basic-excercises/
  398  clear
  399  ls
  400  mkdir git-basic-excercises
  401  cd git-basic-excercises/
  402  git init
  403  touch README.md
  404  git add README.md 
  405  git commit -m 'initial commit'
  406* git config -- user.email 'nkumaneandy@gmail.com
  407  git config -- user.name 'Andy'
  408  git log
  409  git commit -m 'initial commit'
  410  nano README.md 
  411  git add README.md 
  412  git commit -m 'second commit'
  413  nano README.md 
  414  git add README.md 
  415  git commit -m 'third commit'
  416  git branch
  417  git branch milkshake-flavours
  418  git branch
  419  git checkout milkshake-flavours 
  420  git branch
  421  nano milkshake.md
  422  git add milkshake.md 
  423  git commit -m 'added initial flavours'
  424  git checkout master 
  425  git branch history
  426  git checkout history 
  427  git log
  428  history > history.txt
